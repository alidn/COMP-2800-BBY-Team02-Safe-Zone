{"version":3,"sources":["components/dots.js","components/single-player.js","components/GamePane.js","components/myaccount.js","components/Feedback.js","components/chat.js","components/multiplayer.js","components/chooseroom.js","App.js","serviceWorker.js","index.js"],"names":["width","Matter","Bodies","window","innerWidth","MOVEMENT_FORCE_COEFFICIENT","moveAllDotsRandomly","dots","forEach","dot","force","getForce","moveInRandomDirection","forceCoefficient","x","Math","random","y","finalScore","addScoreInterval","GamePane","this","engine","Engine","create","world","gravity","scale","bots","externalUsers","Map","mouseMoveCallbacks","infectedCallbacks","updateCallbacks","masks","currentlyWearingMasks","thisUserChanceOfInfection","height","botInitLocationX","botInitLocationY","botRadius","transmissionDistance","botColorHealthy","botColorInfected","userColor","externalUsersColors","stop","particleStatus","INFECTED","UNINFECTED","username","newUserDot","circle","friction","frictionAir","frictionStatic","render","strokeStyle","size","fillStyle","lineWidth","label","set","World","add","limit","length","position","getRandomPosition","mask","sprite","texture","xScale","yScale","isSensor","push","floor","maskIndex","remove","splice","isGettingNewMask","decreaseInfectionChanceByOneMask","removeMask","i","Bounds","contains","userDot","bounds","bot","Body","setPosition","moveBodyTo","get","thisUserLabel","Render","canvas","canvasElement","options","wireframes","showAngleIndicator","background","mouse","Mouse","mouseConstraint","MouseConstraint","constraint","stiffness","visible","particle","Events","on","console","log","body","setVelocity","callback","some","distance","n","addBot","clearInterval","moveMovementInterval","dot1","dot2","j","targetAngle","Vector","angle","applyForce","cos","sin","setAngle","timeout","setInterval","updateInfectionStatus","updateParticlesColors","isUserDotInfected","handleMasks","createRender","createMouse","addMouseMoveCallback","handleMouseMove","bind","subscribeMouseMoveCallbacks","addWalls","run","runner","Runner","top","rectangle","isStatic","bottom","left","right","radius","color","colroRadius","gameLogTypes","Statistic","Countdown","message","type","SinglePlayerPane","gamePaneRef","useRef","useState","infectionChance","setInfectionChance","gameLogs","setGameLogs","score","setScore","endModalVisible","setEndModalVisible","shouldReportInfection","remTime","setRemTime","sentScore","useEffect","interval","prev","current","stopMovement","fetch","method","JSON","stringify","headers","then","a","concat","slice","handleLost","wasSavedByMask","prevScore","max","setTimeout","canvasNode","useCallback","node","gamePane","setCanvasElement","setWidthAndHeight","getOptimalPaneSize","addBots","createUser","startParticlesMovementsAndTransmission","addInfectedCallback","startInfecting","v","addMask","onBack","title","backIcon","onConfirm","location","href","ArrowLeftOutlined","style","fontSize","extra","percent","format","display","flexDirection","flexWrap","marginRight","textAlign","flexGrow","ref","margin","marginTop","showInfo","strokeColor","GameLogs","logs","okText","cancelText","onCancel","onOk","reload","border","borderRadius","map","closable","deviceWidth","MyAccount","marginLeft","icon","UserOutlined","TextArea","Input","Feedback","sent","setSent","feedback","setFeedback","send","float","SmileOutlined","subTitle","onChange","e","target","value","rows","defaultValue","character","allowHalf","onClick","Chat","props","messages","setMessages","received","setReceived","socket","off","setMessage","padding","itemLayout","item","Item","key","Meta","avatar","description","marginBottom","placeholder","emit","sessionStorage","getItem","Multiplayer","roomID","localStorage","users","setUsers","colors","setColors","roomEvents","joinRoom","mousePosition","u","setTargetPosition","allJoinedUsers","indexOf","createExternalUser","getUserColor","UsersAvatars","getPopoverContent","data","status","json","maxScore","macScore","gamesPlayed","popoverContents","setPopoverContents","promises","user","Promise","all","values","index","content","backgroundColor","createRoom","newUserJoined","chatroomMessage","roomCreated","ChooseRoom","changeRoomID","isCreateButtonLoading","setCreateButtonLoading","chosenRoom","setChosenRoom","loading","Modal","success","setItem","App","io","connect","setRoomID","path","something","newRoomID","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.08d1e9c3.chunk.js","sourcesContent":["import Matter from \"matter-js\";\n\nconst Bodies = Matter.Bodies;\nconst width = window.innerWidth;\n\nexport const DOTS_INIITAL_LOCATION = {\n  x: 50,\n  y: 50,\n};\nexport const INIT_FORCE_COEFFICIENT = width < 700 ? 700 : 100;\nexport const MOVEMENT_FORCE_COEFFICIENT = width < 700 ? 10000 : 1300;\nexport const status = {\n  UNINFECTED: \"uninfected\",\n  INFECTED: \"infected\",\n  RECOVERED: \"recovered\",\n};\nexport const colors = {\n  USER: \"#2884E0\",\n  UNINFECTED: \"#60e68f\",\n  INFECTED: \"#e66060\",\n  RECOVERED: \"yellow\",\n  BORDER: \"grey\",\n  ENEMY: \"orange\",\n};\nexport const BORDER_OPACITY = 0.4;\nexport const sizes = {\n  USER_RADIUS: width < 700 ? 5 : 10,\n  BORDER_RADIUS: width < 700 ? 15 : 45,\n  BOT_RADIUS: width < 700 ? 5 : 10,\n};\nexport const TRANSMISION_DISTANCE = 10000;\n\nexport function createDot({ loc, radius, color }) {\n  let dot = Bodies.circle(\n    loc.x || DOTS_INIITAL_LOCATION.x,\n    loc.y || DOTS_INIITAL_LOCATION.y,\n    radius || sizes.BOT_RADIUS,\n    {\n      friction: 0,\n      frictionAir: 0,\n      force: { x: 0, y: 0 },\n      render: {\n        strokeStyle: color || colors.UNINFECTED,\n        fillStyle: \"transparent\",\n        lineWidth: 5,\n      },\n      label: status.UNINFECTED,\n      opacity: 0.3,\n    }\n  );\n  return dot;\n}\n\nexport function addBorder(dot, { radius, color }) {\n  let borderDot = createDot(\n    radius || sizes.BORDER_RADIUS,\n    color || colors.BORDER\n  );\n  borderDot.isSensor = true;\n  borderDot.render.opacity = BORDER_OPACITY;\n\n  // TODO: The inner dot properties should be the same as 'dot'.\n  let innerDot = createDot({\n    loc: {},\n    radius: sizes.BORDER_RADIUS,\n  });\n  Matter.Body.setParts(dot, [dot, borderDot, innerDot]);\n}\n\nexport function updateColorsBasedOnStatus(dots) {\n  dots.forEach((dot) => {\n    let newColor;\n    switch (dot.label) {\n      case status.INFECTED:\n        newColor = colors.INFECTED;\n        break;\n      case status.UNINFECTED:\n        newColor = colors.UNINFECTED;\n        break;\n      case status.RECOVERED:\n        newColor = colors.RECOVERED;\n    }\n    dot.render.fillStyle = newColor;\n  });\n}\n\nexport function updateStatusBasedOnDistance(dots) {\n  for (let i = 0; i < dots.length; i++) {\n    for (let j = 0; j < dots.length; j++) {\n      if (i === j) continue;\n      if (distance(dots[i], dots[j]) < TRANSMISION_DISTANCE) {\n        if (isInfected(dots[i]) || isInfected(dots[j])) {\n          makeInfected(dots[i]);\n          makeInfected(dots[j]);\n        }\n      }\n    }\n  }\n  updateColorsBasedOnStatus(dots);\n}\n\nexport function isInfected(dot) {\n  return dot.label === status.INFECTED;\n}\n\nexport function makeInfected(dot) {\n  dot.label = status.INFECTED;\n}\n\nexport function makeRecovered(dot) {\n  dot.label = status.RECOVERED;\n}\n\nexport function moveAllDotsRandomly(dots) {\n  dots.forEach((dot) => moveInRandomDirection(dot));\n}\n\nfunction moveInRandomDirection(dot) {\n  dot.force = getRandomMovementForce();\n}\n\nfunction distance(dot1, dot2) {\n  return (\n    (dot1.position.x - dot2.position.x) * (dot1.position.x - dot2.position.x) +\n    (dot1.position.y - dot2.position.y) * (dot1.position.y - dot2.position.y)\n  );\n}\n\nexport function getRandomInitialForce() {\n  return getForce(INIT_FORCE_COEFFICIENT);\n}\n\nexport function getRandomMovementForce() {\n  return getForce(MOVEMENT_FORCE_COEFFICIENT);\n}\n\nexport function getForce(forceCoefficient) {\n  return {\n    x: (Math.random() / forceCoefficient) * (Math.random() < 0.5 ? -1 : 1),\n    y: (Math.random() / forceCoefficient) * (Math.random() < 0.5 ? -1 : 1),\n  };\n}\n\nexport function createNDots(n, isPaused) {\n  let dots = [];\n\n  for (let i = 0; i < n; i++) {\n    let dot = createDot(undefined, undefined, isPaused);\n    dots.push(dot);\n  }\n\n  return dots;\n}\n","import React, { useCallback, useRef, useState, useEffect } from \"react\";\nimport GamePane from \"./GamePane\";\nimport {\n  Alert,\n  Progress,\n  PageHeader,\n  Popconfirm,\n  Modal,\n  Statistic,\n} from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nconst { Countdown } = Statistic;\n\nconst gameLogTypes = {\n  savedByMask: {\n    message: \"You got exposed but were saved by mask\",\n    type: \"info\",\n  },\n  gotExposed: { message: \"You got exposed and infected\", type: \"error\" },\n  maxExpired: { message: \"One of your masks expired\", type: \"warning\" },\n  gotMask: { message: \"You got a new mask\", type: \"success\" },\n};\n\nlet finalScore;\n\nlet addScoreInterval;\nexport default function SinglePlayerPane({ username }) {\n  let gamePaneRef = useRef(null);\n  let [infectionChance, setInfectionChance] = useState(100);\n  let [gameLogs, setGameLogs] = useState([]);\n  let [score, setScore] = useState(0);\n  let [endModalVisible, setEndModalVisible] = useState(false);\n  let shouldReportInfection = true;\n  let [remTime, setRemTime] = useState(32);\n  let sentScore = false;\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setRemTime((prev) => {\n        if (prev === 1) {\n          gamePaneRef.current.stopMovement();\n          setEndModalVisible(true);\n          if (!sentScore) {\n            fetch(`/api/${username}/score`, {\n              method: \"POST\",\n              body: JSON.stringify({ score: finalScore }),\n              headers: { \"Content-Type\": \"application/json\" },\n            }).then((a) => console.log(a));\n            sentScore = true;\n          }\n          clearInterval(addScoreInterval);\n          return 1;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    setGameLogs((prev) => prev.concat(gameLogTypes.gotMask));\n    setGameLogs((prev) => prev.slice(prev.length - 4, prev.length));\n  }, [infectionChance]);\n\n  let handleLost = function (wasSavedByMask) {\n    if (!shouldReportInfection) return;\n    if (wasSavedByMask) {\n      setGameLogs((prev) => prev.concat(gameLogTypes.savedByMask));\n    } else {\n      setGameLogs((prev) => prev.concat(gameLogTypes.gotExposed));\n      setScore((prevScore) => prevScore - 30);\n    }\n    setGameLogs((prev) =>\n      prev.slice(Math.max(0, prev.length - 4), prev.length)\n    );\n    shouldReportInfection = false;\n    setTimeout(() => {\n      shouldReportInfection = true;\n    }, 500);\n  };\n\n  let canvasNode = useCallback((node) => {\n    if (node != null) {\n      let gamePane = new GamePane()\n        .setCanvasElement(node)\n        .setWidthAndHeight(\n          getOptimalPaneSize().width,\n          getOptimalPaneSize().height\n        )\n        .addBots(window.innerWidth < 700 ? 10 : 20)\n        .createUser()\n        .startParticlesMovementsAndTransmission(60)\n        .addInfectedCallback(handleLost)\n        .run();\n      gamePaneRef.current = gamePane;\n\n      setTimeout(() => gamePane.startInfecting(), 2000);\n\n      addScoreInterval = setInterval(() => {\n        if (\n          infectionChance !== Math.max(0, gamePane.thisUserChanceOfInfection)\n        ) {\n          setInfectionChance((v) =>\n            Math.max(0, gamePane.thisUserChanceOfInfection)\n          );\n        }\n\n        setScore((prevScore) => prevScore + 5);\n      }, 500);\n\n      setInterval(() => {\n        gamePane.addMask();\n      }, 2000);\n    }\n  }, []);\n\n  return (\n    <div>\n      <PageHeader\n        onBack={() => {}}\n        title={username}\n        backIcon={\n          <Popconfirm\n            title=\"Are you sure you want to exit?\"\n            onConfirm={() => (window.location.href = \"/HTML-shell/main.html\")}\n          >\n            <ArrowLeftOutlined style={{ fontSize: \"20px\" }} />\n          </Popconfirm>\n        }\n        extra={[\n          <Progress\n            type=\"circle\"\n            percent={((30 - remTime) / 30) * 100}\n            format={(percent) => `${remTime} seconds`}\n          />,\n        ]}\n      />\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          marginRight: \"50px\",\n        }}\n      >\n        <div style={{ textAlign: \"center\", flexGrow: 3 }}>\n          <canvas\n            style={{ display: \"inline\" }}\n            width=\"900\"\n            height=\"900\"\n            ref={canvasNode}\n          />\n        </div>\n        <div style={{ textAlign: \"center\", margin: \"50px\", marginTop: \"0px\" }}>\n          <h1>Score: {score}</h1>\n          <h2>Chance of infection: {infectionChance}</h2>\n          <Progress\n            // style={{ width: getOptimalPaneSize().width }}\n            percent={infectionChance}\n            showInfo={true}\n            // steps={10}\n            strokeColor=\"#1890ff\"\n            size={\"large\"}\n          />\n          <GameLogs logs={gameLogs} />\n        </div>\n      </div>\n      <Modal\n        title={<h1>GAME ENDED</h1>}\n        visible={endModalVisible}\n        okText={\"Play Again!\"}\n        cancelText={\"See Leaderboard\"}\n        onCancel={() => (window.location.href = \"/ejs/leaderboard\")}\n        onOk={() => window.location.reload()}\n      >\n        <h2>\n          Your score:\n          {(() => {\n            finalScore = score;\n            return score;\n          })()}\n        </h2>\n      </Modal>\n    </div>\n  );\n}\n\nfunction GameLogs({ logs }) {\n  return (\n    <div\n      style={{\n        margin: \"10px\",\n        border: \"1px solid #1890FF\",\n        borderRadius: \"5px\",\n        width: \"300px\",\n      }}\n    >\n      <h2 style={{ marginTop: \"5px\" }}>Game Logs</h2>\n      {logs.map((log) => {\n        return (\n          <Alert\n            style={{ margin: \"10px\" }}\n            type={log.type}\n            closable={false}\n            message={<h2>{log.message}</h2>}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nfunction getOptimalPaneSize() {\n  const options = {\n    mobile: { width: 300, height: 300 },\n    tablet: { width: 400, height: 400 },\n    desktop: { width: 600, height: 600 },\n  };\n  // TODO: innerWidth might not be supported in some browsers;\n  const deviceWidth = window.innerWidth;\n  if (deviceWidth < 400) {\n    return options.mobile;\n  } else if (deviceWidth < 700) {\n    return options.tablet;\n  } else {\n    return options.desktop;\n  }\n}\n","import Matter from \"matter-js\";\nimport {\n  moveAllDotsRandomly,\n  addBorder,\n  updateColorsBasedOnStatus,\n  updateStatusBasedOnDistance,\n} from \"./dots\";\n\nexport default class GamePane {\n  constructor() {\n    this.engine = Matter.Engine.create();\n    this.world = this.engine.world;\n    this.world.gravity = {\n      x: 0,\n      y: 0,\n      scale: 0,\n    };\n\n    this.bots = [];\n    this.externalUsers = new Map();\n    this.mouseMoveCallbacks = [];\n    this.infectedCallbacks = [];\n    this.updateCallbacks = [];\n    this.masks = [];\n    this.currentlyWearingMasks = [];\n    this.thisUserChanceOfInfection = 100;\n\n    this.width = 700;\n    this.height = 700;\n    this.botInitLocationX = 350;\n    this.botInitLocationY = 350;\n    this.botRadius = window.innerWidth < 700 ? 5 : 10;\n    this.transmissionDistance = 900;\n    this.botColorHealthy = \"#42f595\";\n    this.botColorInfected = \"#f54e42\";\n    this.userColor = \"grey\";\n    this.externalUsersColors = [\"#fcba03\", \"#0377fc\", \"#fc03f0\"];\n\n    this.stop = false;\n\n    this.particleStatus = {\n      INFECTED: \"infected\",\n      UNINFECTED: \"uninfected\",\n    };\n  }\n\n  createExternalUser(username) {\n    let newUserDot = Matter.Bodies.circle(\n      50,\n      50,\n      window.innerWidth < 700 ? 10 : 20,\n      {\n        friction: 0,\n        frictionAir: 0,\n        frictionStatic: 0,\n        force: { x: 0, y: 0 },\n        render: {\n          strokeStyle: this.externalUsersColors[this.externalUsers.size],\n          fillStyle: \"transparent\",\n          lineWidth: 3,\n        },\n        label: username,\n      }\n    );\n    this.externalUsers.set(username, newUserDot);\n    // console.log(`Added external user ${username}`);\n    Matter.World.add(this.world, [newUserDot]);\n    return this;\n  }\n\n  addMask(limit) {\n    if (this.masks.length >= (limit || 5)) return;\n    let position = this.getRandomPosition();\n\n    let mask = Matter.Bodies.circle(position.x, position.y, 20, {\n      render: {\n        sprite: {\n          texture: \"https://image.flaticon.com/icons/svg/2927/2927715.svg\",\n          xScale: window.innerWidth < 700 ? 0.08 : 0.1,\n          yScale: window.innerWidth < 700 ? 0.08 : 0.1,\n        },\n      },\n      isSensor: true,\n    });\n    this.masks.push(mask);\n    Matter.World.add(this.world, mask);\n  }\n\n  getRandomPosition() {\n    let randomX = Math.floor(Math.random() * this.width);\n    let randomY = Math.floor(Math.random() * this.height);\n    return {\n      x: randomX,\n      y: randomY,\n    };\n  }\n\n  removeMask(maskIndex) {\n    Matter.World.remove(this.world, this.masks[maskIndex]);\n    this.masks.splice(maskIndex, 1);\n  }\n\n  handleMasks() {\n    let maskIndex = this.isGettingNewMask();\n    if (maskIndex !== -1) {\n      this.decreaseInfectionChanceByOneMask();\n      this.removeMask(maskIndex);\n    }\n  }\n\n  isGettingNewMask() {\n    for (let i = 0; i < this.masks.length; i++) {\n      if (Matter.Bounds.contains(this.userDot.bounds, this.masks[i].position)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  decreaseInfectionChanceByOneMask() {\n    this.thisUserChanceOfInfection -= 10;\n  }\n\n  increaseInfectionChanceByOneMask() {\n    this.thisUserChanceOfInfection += 10;\n  }\n\n  resetInfectionStatus() {\n    this.bots.forEach((bot) => (bot.label = this.particleStatus.UNINFECTED));\n  }\n\n  resetPositions() {\n    this.bots.forEach((bot) =>\n      Matter.Body.setPosition(bot, {\n        x: this.botInitLocationX,\n        y: this.botInitLocationY,\n      })\n    );\n    Matter.Body.setPosition(this.userDot, { x: 50, y: 50 });\n    this.externalUsers.forEach((dot) =>\n      Matter.Body.setPosition(dot, { x: 50, y: 50 })\n    );\n  }\n\n  setTargetPosition(username, position) {\n    this.moveBodyTo(this.externalUsers.get(username), position);\n  }\n\n  createUser(username) {\n    this.thisUserLabel = username;\n    this.userDot = Matter.Bodies.circle(\n      50,\n      50,\n      window.innerWidth < 700 ? 10 : 20,\n      {\n        friction: 0,\n        frictionAir: 0,\n        frictionStatic: 0,\n        force: { x: 0, y: 0 },\n        render: {\n          strokeStyle: this.userColor,\n          fillStyle: \"transparent\",\n          lineWidth: 3,\n        },\n        label: username,\n      }\n    );\n\n    Matter.World.add(this.world, [this.userDot]);\n    return this;\n  }\n\n  createRender() {\n    this.render = Matter.Render.create({\n      canvas: this.canvasElement,\n      engine: this.engine,\n      options: {\n        width: this.width,\n        height: this.height,\n        wireframes: false,\n        showAngleIndicator: true,\n        background: \"#2c373d\",\n      },\n    });\n  }\n\n  getUserColor(username) {\n    if (username === this.thisUserLabel) {\n      return this.userColor;\n    } else {\n      return this.externalUsers.get(username).render.strokeStyle;\n    }\n  }\n\n  createMouse() {\n    this.mouse = Matter.Mouse.create(this.render.canvas);\n    this.mouseConstraint = Matter.MouseConstraint.create(this.engine, {\n      mouse: this.mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: true,\n        },\n      },\n    });\n  }\n\n  addBot() {\n    let particle = Matter.Bodies.circle(\n      this.botInitLocationX,\n      this.botInitLocationY,\n      this.botRadius,\n      {\n        friction: 0,\n        frictionAir: 0,\n        frictionStatic: 0,\n        force: { x: 0, y: 0 },\n        render: {\n          strokeStyle: this.botColorHealthy,\n          fillStyle: this.botColorHealthy,\n          lineWidth: 3,\n        },\n      }\n    );\n    this.bots.push(particle);\n    Matter.World.add(this.world, [particle]);\n    return this;\n  }\n\n  subscribeMouseMoveCallbacks() {\n    Matter.Events.on(this.mouseConstraint, \"mousedown\", () => {\n      console.log(this.mouseConstraint.body);\n      if (\n        this.mouseConstraint.body &&\n        this.mouseConstraint.body.label === this.particleStatus.INFECTED\n      ) {\n        this.stop = true;\n        this.bots.forEach((bot) =>\n          Matter.Body.setVelocity(bot, { x: 0, y: 0 })\n        );\n      }\n    });\n\n    this.mouseMoveCallbacks.forEach((callback) => {\n      Matter.Events.on(this.mouseConstraint, \"mousemove\", () => {\n        callback(this.mouse);\n      });\n    });\n  }\n\n  isUserDotInfected() {\n    return this.bots.some((bot) => {\n      return (\n        bot.label === this.particleStatus.INFECTED &&\n        this.distance(bot, this.userDot) < this.transmissionDistance\n      );\n    });\n  }\n\n  addInfectedCallback(callback) {\n    this.infectedCallbacks.push(callback);\n    return this;\n  }\n\n  addUpdateCallback(callback) {\n    this.updateCallbacks.push(callback);\n    return this;\n  }\n\n  addMouseMoveCallback(callback) {\n    this.mouseMoveCallbacks.push(callback);\n    return this;\n  }\n\n  addBots(n) {\n    for (let i = 0; i < n; i++) {\n      this.addBot();\n    }\n    return this;\n  }\n\n  stopMovement() {\n    clearInterval(this.moveMovementInterval);\n    this.bots.forEach((bot) => Matter.Body.setVelocity(bot, { x: 0, y: 0 }));\n  }\n\n  startInfecting() {\n    this.bots[0].label = this.particleStatus.INFECTED;\n    return this;\n  }\n\n  distance(dot1, dot2) {\n    return (\n      (dot1.position.x - dot2.position.x) *\n        (dot1.position.x - dot2.position.x) +\n      (dot1.position.y - dot2.position.y) * (dot1.position.y - dot2.position.y)\n    );\n  }\n\n  updateInfectionStatus() {\n    for (let i = 0; i < this.bots.length; i++) {\n      for (let j = i + 1; j < this.bots.length; j++) {\n        if (\n          this.distance(this.bots[i], this.bots[j]) > this.transmissionDistance\n        ) {\n          continue;\n        }\n        if (\n          this.bots[i].label === this.particleStatus.INFECTED ||\n          this.bots[j].label === this.particleStatus.INFECTED\n        ) {\n          this.bots[i].label = this.particleStatus.INFECTED;\n          this.bots[j].label = this.particleStatus.INFECTED;\n        }\n      }\n    }\n  }\n\n  updateParticlesColors() {\n    this.bots.forEach((bot) => {\n      if (bot.label === this.particleStatus.INFECTED) {\n        bot.render.fillStyle = this.botColorInfected;\n        bot.render.strokeStyle = this.botColorInfected;\n      }\n    });\n  }\n\n  moveBodyTo(body, position) {\n    let targetAngle = Matter.Vector.angle(body.position, position);\n    let force = window.innerWidth < 700 ? 0.003 : 0.015;\n    Matter.Body.setVelocity(body, { x: 0, y: 0 });\n    Matter.Body.applyForce(body, body.position, {\n      x: Math.cos(targetAngle) * force,\n      y: Math.sin(targetAngle) * force,\n    });\n    Matter.Body.setAngle(body, targetAngle);\n  }\n\n  handleMouseMove(mouse) {\n    this.moveBodyTo(this.userDot, mouse.position);\n  }\n\n  startParticlesMovementsAndTransmission(timeout) {\n    this.moveMovementInterval = setInterval(() => {\n      if (!this.stop) moveAllDotsRandomly(this.bots);\n      this.updateInfectionStatus();\n      this.updateParticlesColors();\n      if (this.isUserDotInfected()) {\n        this.infectedCallbacks.forEach((callback) =>\n          callback(Math.random() < 1 - this.thisUserChanceOfInfection / 100)\n        );\n      }\n      this.updateCallbacks.forEach((callback) => callback(this.mouse));\n      this.handleMasks();\n    }, timeout || 60);\n    return this;\n  }\n\n  run() {\n    this.createRender();\n    this.createMouse();\n    this.addMouseMoveCallback(this.handleMouseMove.bind(this));\n    this.subscribeMouseMoveCallbacks();\n    this.addWalls();\n\n    Matter.Render.run(this.render);\n    this.runner = Matter.Runner.create();\n    Matter.Runner.run(this.runner, this.engine);\n\n    return this;\n  }\n\n  addWalls() {\n    let top = Matter.Bodies.rectangle(this.width / 2, 0, this.width, 2, {\n      isStatic: true,\n    });\n    let bottom = Matter.Bodies.rectangle(\n      this.width / 2,\n      this.height,\n      this.width,\n      2,\n      {\n        isStatic: true,\n      }\n    );\n    let left = Matter.Bodies.rectangle(0, this.height / 2, 2, this.height, {\n      isStatic: true,\n    });\n    let right = Matter.Bodies.rectangle(\n      this.width,\n      this.height / 2,\n      2,\n      this.height,\n      { isStatic: true }\n    );\n    Matter.World.add(this.world, [top, bottom, left, right]);\n  }\n\n  setBotParticleOptions({ radius, color }) {\n    this.botRadius = radius;\n    this.colroRadius = radius;\n    return this;\n  }\n\n  setCanvasElement(canvasElement) {\n    this.canvasElement = canvasElement;\n    return this;\n  }\n\n  setWidthAndHeight(width, height) {\n    this.width = width;\n    this.height = height;\n    this.botInitLocationX = width / 2;\n    this.botInitLocationY = height / 2;\n    return this;\n  }\n}\n","import React from \"react\";\nimport { Avatar } from \"antd\";\nimport { UserOutlined, ArrowLeftOutlined } from \"@ant-design/icons\";\n\nexport default function MyAccount({ username }) {\n  let friends = [];\n\n  return (\n    <div style={{ margin: \"20px\" }}>\n      <a href=\"HTML-shell/main.html\">\n        <ArrowLeftOutlined\n          style={{ fontSize: \"35px\", marginTop: \"20px\", marginLeft: \"20px\" }}\n        />\n      </a>\n      <div style={{ marginTop: \"20px\", display: \"flex\", flexDirection: \"row\" }}>\n        <h1 style={{ margin: \"20px\", fontSize: \"35px\" }}>\n          <Avatar size={64} icon={<UserOutlined />} />\n          <span style={{ margin: \"20px\" }}>{username}</span>\n        </h1>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Input, Button, Rate, Result } from \"antd\";\nimport { ArrowLeftOutlined, SmileOutlined } from \"@ant-design/icons\";\n\nconst { TextArea } = Input;\n\nexport default function Feedback() {\n  let [sent, setSent] = useState(false);\n  let [feedback, setFeedback] = useState(\"\");\n\n  let send = async function () {\n    setSent(true);\n    console.log(feedback);\n    await fetch(\"/api/feedback\", {\n      method: \"POST\",\n      \"Content-Type\": \"application/json\",\n      body: {\n        feedback: feedback,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <div style={{ margin: \"20px\" }}>\n        <a href=\"/HTML-shell/main.html\">\n          <ArrowLeftOutlined style={{ fontSize: \"20px\" }} />\n        </a>\n        <Button\n          href=\"/HTML-shell/aboutus.html\"\n          type=\"link\"\n          style={{ float: \"right\" }}\n        >\n          About us\n        </Button>\n      </div>\n      {sent ? (\n        <Result\n          icon={<SmileOutlined />}\n          title=\"Thank you for your feedback!\"\n          subTitle=\"your feedback was send to the developers\"\n        />\n      ) : (\n        <div\n          style={{\n            textAlign: \"center\",\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          <h1>Tell us what you think!</h1>\n          <TextArea\n            onChange={(e) => setFeedback(e.target.value)}\n            style={{ margin: \"auto\", width: \"50%\" }}\n            rows={4}\n          />\n          <div style={{ margin: \"auto\", width: \"50%\", marginTop: \"20px\" }}>\n            <label>Our Rating </label>\n            <Rate\n              style={{ margin: \"5px\" }}\n              defaultValue={5}\n              character={<SmileOutlined />}\n              allowHalf\n            />\n\n            <Button\n              onClick={send}\n              style={{ margin: \"5px\" }}\n              size={\"large\"}\n              type=\"primary\"\n            >\n              Send Feedback\n            </Button>\n            <h4 style={{ marginTop: \"50px\" }}>\n              Or email us at:\n              <a\n                style={{ marginLeft: \"5px\" }}\n                href=\"mailto:safezonemanagment@gmail.com\"\n              >\n                safezonemanagment@gmail.com\n              </a>\n            </h4>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { List, Avatar, Input, Button, Space, Empty, Divider } from \"antd\";\n\nexport default function Chat(props) {\n  let [messages, setMessages] = useState([]);\n  let [received, setReceived] = useState(false);\n\n  props.socket.off(\"chatroom-message\").on(\"chatroom-message\", (message) => {\n    setReceived(true);\n    setMessages((prev) => prev.concat(message));\n    setMessages((prev) => prev.slice(prev.length - 12, prev.length));\n  });\n\n  let [message, setMessage] = useState(\"\");\n\n  let send = function () {\n    console.log(\"sending\", message);\n    props.socket.emit(\"chatroom-message\", {\n      username: sessionStorage.getItem(\"username\"),\n      message: message,\n    });\n    console.log(messages);\n  };\n\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        border: \"1px solid #1890FF\",\n        padding: \"30px\",\n        marginRight: \"10px\",\n        marginLeft: \"20px\",\n        width: \"500px\",\n        borderRadius: \"10px\",\n      }}\n    >\n      <h1>Chatroom</h1>\n      <Divider />\n      <List style={{ height: \"500px\" }} itemLayout=\"horizontal\">\n        {!received ? (\n          <Empty description={\"No message yet\"} />\n        ) : (\n          messages.map((item) => (\n            <List.Item key={item.username}>\n              <List.Item.Meta\n                avatar={<Avatar />}\n                title={item.username}\n                description={item.message}\n              />\n            </List.Item>\n          ))\n        )}\n      </List>\n      <Space />\n      <div style={{ position: \"absolute\", bottom: 0, marginBottom: \"30px\" }}>\n        <Input\n          placeholder={\"Enter a message\"}\n          size={\"large\"}\n          style={{ margin: \"auto\", width: \"400px\" }}\n          onChange={(e) => setMessage(e.target.value)}\n        ></Input>\n        <Divider type=\"vertical\" />\n        <Button\n          size={\"large\"}\n          style={{ marginTop: \"10px\" }}\n          onClick={send}\n          type=\"primary\"\n        >\n          Send\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React, { useCallback, useRef, useEffect, useState } from \"react\";\nimport GamePane from \"./GamePane\";\nimport {\n  PageHeader,\n  Popconfirm,\n  Avatar,\n  Spin,\n  Popover,\n  Progress,\n  Alert,\n  Modal,\n} from \"antd\";\nimport { ArrowLeftOutlined, UserOutlined } from \"@ant-design/icons\";\nimport Chat from \"./chat\";\n\nexport default function Multiplayer({ socket, username }) {\n  let roomID = localStorage.getItem(\"room-id\");\n  let [users, setUsers] = useState([username]);\n  let [colors, setColors] = useState([]);\n  let [infectionChance, setInfectionChance] = useState(100);\n  let [gameLogs, setGameLogs] = useState([]);\n  let [score, setScore] = useState(0);\n  let [endModalVisible, setEndModalVisible] = useState(false);\n  let shouldReportInfection = true;\n  let [remTime, setRemTime] = useState(32);\n  let sentScore = false;\n\n  const gameLogTypes = {\n    savedByMask: {\n      message: \"You got exposed but were saved by mask\",\n      type: \"info\",\n    },\n    gotExposed: { message: \"You got exposed and infected\", type: \"error\" },\n    maxExpired: { message: \"One of your masks expired\", type: \"warning\" },\n    gotMask: { message: \"You got a new mask\", type: \"success\" },\n  };\n  let finalScore;\n\n  let addScoreInterval;\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setRemTime((prev) => {\n        if (prev === 1) {\n          gamePaneRef.current.stopMovement();\n          setEndModalVisible(true);\n          if (!sentScore) {\n            fetch(`/api/${username}/score`, {\n              method: \"POST\",\n              body: JSON.stringify({ score: finalScore }),\n              headers: { \"Content-Type\": \"application/json\" },\n            }).then((a) => console.log(a));\n            sentScore = true;\n          }\n          clearInterval(addScoreInterval);\n          return 1;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    setGameLogs((prev) => prev.concat(gameLogTypes.gotMask));\n    setGameLogs((prev) => prev.slice(prev.length - 4, prev.length));\n  }, [infectionChance]);\n\n  let handleLost = function (wasSavedByMask) {\n    if (!shouldReportInfection) return;\n    if (wasSavedByMask) {\n      setGameLogs((prev) => prev.concat(gameLogTypes.savedByMask));\n    } else {\n      setGameLogs((prev) => prev.concat(gameLogTypes.gotExposed));\n      setScore((prevScore) => prevScore - 30);\n    }\n    setGameLogs((prev) =>\n      prev.slice(Math.max(0, prev.length - 4), prev.length)\n    );\n    shouldReportInfection = false;\n    setTimeout(() => {\n      shouldReportInfection = true;\n    }, 500);\n  };\n\n  useEffect(() => {\n    socket.emit(roomEvents.joinRoom, roomID, username);\n  }, [socket, roomID, username]);\n\n  socket\n    .off(roomEvents.mousePosition)\n    .on(roomEvents.mousePosition, (u, mousePosition) => {\n      if (username !== u) {\n        gamePaneRef.current.setTargetPosition(u, mousePosition);\n      }\n    });\n\n  socket.off(roomEvents.allJoinedUsers).on(roomEvents.allJoinedUsers, (u) => {\n    console.log(`got all users ${JSON.stringify(u)}`);\n    for (let i = 0; i < u.length; i++) {\n      if (users.indexOf(u[i]) === -1) {\n        gamePaneRef.current.createExternalUser(u[i]);\n        setUsers((prev) => prev.concat(u[i]));\n        setColors((prev) =>\n          prev.concat(gamePaneRef.current.getUserColor(u[i]))\n        );\n      }\n    }\n  });\n\n  let gamePaneRef = useRef(null);\n\n  let canvasNode = useCallback((node) => {\n    if (node != null) {\n      let gamePane = new GamePane()\n        .setCanvasElement(node)\n        .setWidthAndHeight(\n          getOptimalPaneSize().width,\n          getOptimalPaneSize().height\n        )\n        .addBots(10)\n        .createUser()\n        .startParticlesMovementsAndTransmission(60)\n        .addInfectedCallback(() => console.log(\"infected!\"))\n        .addMouseMoveCallback((mouse) => {\n          socket.emit(roomEvents.mousePosition, username, mouse.position);\n        })\n        .addInfectedCallback(handleLost)\n        .run();\n\n      gamePaneRef.current = gamePane;\n      setTimeout(() => gamePane.startInfecting(), 2000);\n      addScoreInterval = setInterval(() => {\n        if (\n          infectionChance !== Math.max(0, gamePane.thisUserChanceOfInfection)\n        ) {\n          setInfectionChance((v) =>\n            Math.max(0, gamePane.thisUserChanceOfInfection)\n          );\n        }\n\n        setScore((prevScore) => prevScore + 5);\n      }, 500);\n\n      setInterval(() => {\n        gamePane.addMask();\n      }, 2000);\n    }\n  }, []);\n\n  return (\n    <div>\n      <PageHeader\n        onBack={() => null}\n        title={username}\n        subTitle={`Multiplayer lobby ${roomID}`}\n        backIcon={\n          <Popconfirm title=\"Are you sure you want to leave the room?\">\n            <ArrowLeftOutlined style={{ fontSize: \"20px\" }} />\n          </Popconfirm>\n        }\n        extra={[<UsersAvatars users={users} colors={colors} />]}\n      />\n      <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}>\n        <div>\n          <Progress\n            style={{ marginLeft: \"150px\" }}\n            type=\"circle\"\n            percent={((30 - remTime) / 30) * 100}\n            format={(percent) => `${remTime} seconds`}\n          />\n          <div\n            style={{ textAlign: \"center\", margin: \"50px\", marginTop: \"0px\" }}\n          >\n            <h1>Score: {score}</h1>\n            <h2>Chance of infection: {infectionChance}</h2>\n            <Progress\n              // style={{ width: getOptimalPaneSize().width }}\n              percent={infectionChance}\n              showInfo={true}\n              // steps={10}\n              strokeColor=\"#1890ff\"\n              size={\"large\"}\n            />\n            <GameLogs logs={gameLogs} />\n          </div>\n        </div>\n        <div>\n          <canvas\n            style={{ margin: \"20px\", marginTop: \"20px\" }}\n            width=\"900\"\n            height=\"900\"\n            ref={canvasNode}\n          />\n        </div>\n        <Chat socket={socket} />\n      </div>\n      <Modal\n        title={<h1>GAME ENDED</h1>}\n        visible={endModalVisible}\n        okText={\"Play Again!\"}\n        cancelText={\"See Leaderboard\"}\n        onCancel={() => (window.location.href = \"/ejs/leaderboard\")}\n        onOk={() => window.location.reload()}\n      >\n        <h2>\n          Your score:\n          {(() => {\n            finalScore = score;\n            return score;\n          })()}\n        </h2>\n      </Modal>\n    </div>\n  );\n}\nfunction GameLogs({ logs }) {\n  return (\n    <div\n      style={{\n        margin: \"10px\",\n        border: \"1px solid #1890FF\",\n        borderRadius: \"5px\",\n        width: \"300px\",\n      }}\n    >\n      <h2 style={{ marginTop: \"5px\" }}>Game Logs</h2>\n      {logs.map((log) => {\n        return (\n          <Alert\n            style={{ margin: \"10px\" }}\n            type={log.type}\n            closable={false}\n            message={<h2>{log.message}</h2>}\n          />\n        );\n      })}\n    </div>\n  );\n}\nfunction Header({ username, users, roomID, colors }) {\n  return (\n    <PageHeader\n      onBack={() => null}\n      title={username}\n      subTitle={`Multiplayer lobby ${roomID}`}\n      backIcon={\n        <Popconfirm title=\"Are you sure you want to leave the room?\">\n          <ArrowLeftOutlined style={{ fontSize: \"20px\" }} />\n        </Popconfirm>\n      }\n      extra={[<UsersAvatars users={users} colors={colors} />]}\n    />\n  );\n}\n\nfunction UsersAvatars({ users, colors }) {\n  let getPopoverContent = async function (username) {\n    let data = await fetch(`/api/${username}/maxscore`);\n    if (data.status !== 200) return \"\";\n    data = await data.json();\n    let maxScore = data.macScore;\n\n    data = await fetch(`/api/${username}/gameplayed`);\n    data = await data.json();\n    let gamesPlayed = data.gamesPlayed;\n    return (\n      <div>\n        <p>Max Score: {maxScore}</p>\n        <p>Games played: {gamesPlayed}</p>\n      </div>\n    );\n  };\n\n  let [popoverContents, setPopoverContents] = useState([]);\n  useEffect(() => {\n    let promises = users.map((user) => getPopoverContent(user));\n    Promise.all(promises).then((values) => setPopoverContents(values));\n  }, [users]);\n\n  return (\n    <div>\n      {users.map((user, index) => (\n        <Popover\n          key={user}\n          title={user}\n          content={() => {\n            return popoverContents[index] === \"\" ? (\n              <Spin />\n            ) : (\n              popoverContents[index]\n            );\n          }}\n        >\n          <Avatar\n            style={{\n              backgroundColor: colors[index],\n            }}\n            icon={<UserOutlined />}\n          />\n        </Popover>\n      ))}\n    </div>\n  );\n}\n\n// TODO: Does not work.\nfunction getOptimalPaneSize() {\n  const options = {\n    mobile: { width: 300, height: 300 },\n    tablet: { width: 400, height: 400 },\n    desktop: { width: 600, height: 600 },\n  };\n  // TODO: innerWidth might not be supported in some browsers;\n  const deviceWidth = window.innerWidth;\n  if (deviceWidth < 400) {\n    return options.mobile;\n  } else if (deviceWidth < 700) {\n    return options.tablet;\n  } else {\n    return options.desktop;\n  }\n}\n\nconst roomEvents = {\n  joinRoom: \"join-room\",\n  createRoom: \"createRoom\",\n  newUserJoined: \"new-user-joined\",\n  chatroomMessage: \"chatroom-message\",\n  mousePosition: \"mouse-position\",\n  roomCreated: \"room-created\",\n  allJoinedUsers: \"all-joined-users\",\n};\n","import React, { useState } from \"react\";\nimport { Button, Modal, Input } from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport { unstable_renderSubtreeIntoContainer } from \"react-dom\";\n\nconst roomEvents = {\n  joinRoom: \"join-room\",\n  createRoom: \"createRoom\",\n  newUserJoined: \"new-user-joined\",\n  chatroomMessage: \"chatroom-message\",\n  mousePosition: \"mouse-position\",\n  roomCreated: \"room-created\",\n};\n\nexport default function ChooseRoom({ socket, username, changeRoomID }) {\n  let [isCreateButtonLoading, setCreateButtonLoading] = useState(false);\n  let [chosenRoom, setChosenRoom] = useState(0);\n\n  let handleCreateRoom = function () {\n    setCreateButtonLoading(true);\n    socket.emit(roomEvents.createRoom);\n    socket.off(roomEvents.roomCreated).on(roomEvents.roomCreated, (roomID) => {\n      setCreateButtonLoading(false);\n      Modal.success({\n        title: \"Your room was created\",\n        content: `Your room id is: ${roomID}`,\n        okText: \"Go to the room!\",\n        onOk: () => (window.location.href = \"/react/multiplayer\"),\n      });\n      localStorage.setItem(\"room-id\", roomID);\n    });\n  };\n\n  let handleJoinRoom = function () {\n    localStorage.setItem(\"room-id\", chosenRoom);\n    window.location.href = \"/react/multiplayer\";\n\n    // socket.off(\"failed-join\").on(\"failed-join\", () => {\n    //   Modal.error({\n    //     title: \"Room not found\",\n    //     okText: \"enter another room id\",\n    //   });\n    // });\n    // socket.off(\"join-successful\").on(\"join-successful\", () => {\n    //   Modal.success({\n    //     title: \"Room found\",\n    //     okText: \"Go to the room!\",\n    //     onOk: () => (window.location.href = \"/multiplayer\"),\n    //   });\n    // });\n  };\n\n  return (\n    <div\n      style={{\n        margin: \"20px\",\n        textAlign: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <div>\n        <a\n          href=\"/HTML-shell/main.html\"\n          style={{ color: \"#3aa89b\", fontSize: \"20pt\" }}\n        >\n          <ArrowLeftOutlined style={{ float: \"left\", fontSize: \"20pt\" }} />\n        </a>\n        <Button\n          href=\"/HTML-shell/aboutus.html\"\n          type=\"link\"\n          style={{\n            float: \"right\",\n            fontSize: \"20pt\",\n            color: \"#3aa89b\",\n          }}\n        >\n          About us\n        </Button>\n      </div>\n      <div>\n        <h1>Multiplayer Mode</h1>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <Button\n            loading={isCreateButtonLoading}\n            onClick={handleCreateRoom}\n            style={{\n              backgroundColor: \"#3aa89b\",\n              margin: \"auto\",\n              width: \"60%\",\n              marginTop: \"10px\",\n              fontSize: \"25px\",\n              height: \"50px\",\n              borderRadius: \"5px\",\n              marginBottom: \"10px\",\n            }}\n            type=\"primary\"\n          >\n            Create new room\n          </Button>\n          <p>Or</p>\n          <div\n            style={{\n              margin: \"auto\",\n              width: \"60%\",\n              display: \"flex\",\n              flexDirection: \"row\",\n            }}\n          >\n            <Input\n              onChange={(e) => setChosenRoom(e.target.value)}\n              style={{ margin: \"auto\", fontSize: \"25px\", height: \"50px\" }}\n              placeholder=\"1234\"\n            />\n            <Button\n              style={{\n                backgroundColor: \"#3aa89b\",\n                margin: \"auto\",\n                width: \"60%\",\n                marginTop: \"10px\",\n                fontSize: \"25px\",\n                height: \"50px\",\n                borderRadius: \"5px\",\n                marginBottom: \"10px\",\n              }}\n              type=\"primary\"\n              onClick={handleJoinRoom}\n            >\n              Join a room\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction RoomCreatedModal({ isVisible }) {}\n","import React, { useState, useEffect } from \"react\";\nimport SinglePlayerPane from \"./components/single-player\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport MyAccount from \"./components/myaccount\";\nimport \"./App.css\";\nimport Feedback from \"./components/Feedback\";\nimport Multiplayer from \"./components/multiplayer\";\nimport ChooseRoom from \"./components/chooseroom\";\nimport io from \"socket.io-client\";\n\nfunction App() {\n  let socket = io.connect();\n  let username = localStorage.getItem(\"username\");\n  let [roomID, setRoomID] = useState(null);\n  let something;\n\n  // if (\n  //   window.location.href === \"http://localhost:3000/\" ||\n  //   window.location.href === \"https://rocky-temple-78336.herokuapp.com/\" ||\n  //   window.location.href === \"http://localhost:5000/\"\n  // ) {\n  //   window.location.href = \"/ejs/login\";\n  // }\n\n  let changeRoomID = function (newRoomID) {\n    setRoomID(newRoomID);\n    localStorage.setItem(\"room-id\", newRoomID);\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/react/single\">\n          <SinglePlayerPane username={username} />\n        </Route>\n        <Route path=\"/react/myAccount\">\n          <MyAccount username={username} /> socket={socket}\n        </Route>\n        <Route path=\"/react/feedback\">\n          <Feedback />\n        </Route>\n        <Route path=\"/react/multiplayer\">\n          <Multiplayer socket={socket} username={username} roomID={something} />\n        </Route>\n        <Route path=\"/react/chooseroom\">\n          <ChooseRoom\n            socket={socket}\n            username={username}\n            changeRoomID={changeRoomID}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}